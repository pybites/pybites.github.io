<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyBites - Concepts</title><link>https://pybit.es/</link><description>We Create Well-Rounded Python Developers</description><lastBuildDate>Wed, 06 May 2020 14:08:00 +0200</lastBuildDate><item><title>7 Tips to Improve Your Error Handling in Python</title><link>https://pybit.es/pythonic-exceptions.html</link><description>&lt;p&gt;Proper error handling can make your Python code simpler, more readable, and idiomatic. Here are 7 tips to help you.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Wed, 06 May 2020 14:08:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2020-05-06:/pythonic-exceptions.html</guid><category>exceptions</category><category>exception handling</category><category>anti-patterns</category><category>EAFP</category><category>best practices</category><category>pitfalls</category></item><item><title>Mutable vs Immutable Data Types in Python</title><link>https://pybit.es/immutable-types.html</link><description>&lt;p&gt;Knowing the difference between mutable and immutable types in Python is important. In this article I will give you some practical examples of both and show you some of the advantages of using immutable types. We even look at JS / React / functional programming a bit towards the end.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Mon, 27 Apr 2020 22:53:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2020-04-27:/immutable-types.html</guid><category>mutable</category><category>immutable</category><category>types</category><category>data integrity</category><category>strings</category><category>lists</category><category>functional programming</category><category>javascript</category><category>react</category></item><item><title>When to Write Classes in Python And Why it Matters</title><link>https://pybit.es/when-classes.html</link><description>&lt;p&gt;When people come to Python one of the things they struggle with is OOP (Object Oriented Programming). Not so much the syntax of classes, but more when and when not to use them. If that's you, read on. In this article I will give you some insights that will get you clarity on this.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Sat, 25 Apr 2020 18:30:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2020-04-25:/when-classes.html</guid><category>OOP</category><category>classes</category><category>functions</category><category>data model</category><category>inheritance</category><category>clean code</category><category>DRY</category><category>games</category><category>design</category></item><item><title>Under the Hood: Python Comparison Breakdown</title><link>https://pybit.es/guest-python-comparison-breakdown.html</link><description>&lt;p&gt;Use Python's "dis" module to see how Python evaluates two similar comparison operations.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">AJ Kerrigan</dc:creator><pubDate>Sun, 27 Oct 2019 23:20:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2019-10-27:/guest-python-comparison-breakdown.html</guid><category>guest</category><category>learning</category><category>dis</category><category>precedence</category><category>chaining</category></item><item><title>Linting with Flake8</title><link>https://pybit.es/linting-with-flake8.html</link><description>&lt;p&gt;What the heck is linting? Let's dive into the concept and talk about how flake8 can help us make our code better.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Tue, 08 Oct 2019 20:43:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2019-10-08:/linting-with-flake8.html</guid><category>python</category><category>beginner</category><category>learning</category><category>examples</category><category>code</category><category>linking</category><category>flake8</category></item><item><title>Watermarking photos? "I can do that in Python!"</title><link>https://pybit.es/pillow-intro.html</link><description>&lt;p&gt;My wife is setting up a business from home and wanted to protect photos of her work submitted to social media sites and the web in general. "I can do that using Python!", I exclaimed, thinking I had seen a tutorial showing how ages ago. Laptop open, I set to work and found my bookmarked tutorial. It was using OpenCV2 and even after ~70 odd days of my #100DaysOfCode journey, I didn't really understand it well enough to configure it myself if I had to make changes. (OpenCV is on my list of things to do after my #100Days). I remembered reading about Pillow, or PIL as it is sometimes known, and started to read the docs for it. Challenge to myself accepted!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Lister</dc:creator><pubDate>Mon, 24 Jun 2019 11:00:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2019-06-24:/pillow-intro.html</guid><category>pillow</category><category>images</category><category>png</category><category>jpg</category><category>resize</category><category>watermarking</category><category>image manipulation</category><category>PIL</category></item><item><title>A Short Primer on Assemblers, Compilers and Interpreters</title><link>https://pybit.es/python-interpreters.html</link><description>&lt;p&gt;A gentle introduction to the historical evolution of programming practices.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik O'Shaughnessy</dc:creator><pubDate>Tue, 09 Oct 2018 09:45:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2018-10-09:/python-interpreters.html</guid><category>computer</category><category>programming</category><category>history</category><category>interpreters</category><category>assembly</category><category>C</category><category>high level languages</category><category>math</category></item><item><title>A Python Orientation - How to Get Started</title><link>https://pybit.es/guest-python-orientation.html</link><description>&lt;p&gt;Python is a wonderful language for both beginners and expert programmers, but getting started can be daunting. Which version should I use? Which editors are best? What do you mean there are different implementations and environments? Here's a guide to help navigate these big FAQs.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 17 Aug 2018 09:41:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2018-08-17:/guest-python-orientation.html</guid><category>guest</category><category>2vs3</category><category>CPython</category><category>PyPy</category><category>MicroPython</category><category>pip</category><category>pipenv</category><category>venv</category><category>virtualenv</category><category>Conda</category><category>editors</category><category>Pythonic</category><category>Pythonista</category><category>Zen of Python</category><category>pycon</category><category>PSF</category><category>BDFL</category><category>overview</category><category>reference</category></item><item><title>How Encoding Works in Python</title><link>https://pybit.es/python-encodings.html</link><description>&lt;p&gt;We all know that the computer cannot store letters or numbers so we need some kind of mapping from these letters/numbers to bit strings (the only thing a computer can understand). One such known mapping is &lt;code&gt;ASCII&lt;/code&gt;. If you're not sure about &lt;code&gt;ASCII&lt;/code&gt; and &lt;code&gt;Unicode&lt;/code&gt;, let Aviral give you an introduction ...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aviral Verma</dc:creator><pubDate>Thu, 21 Jun 2018 20:32:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2018-06-21:/python-encodings.html</guid><category>ascii</category><category>unicode</category></item><item><title>Learning Python Decorators by Example</title><link>https://pybit.es/decorators-by-example.html</link><description>&lt;p&gt;Decorators are a sometimes overlooked feature and they might be hard to grasp for beginning Pythonistas. I agree with Aaron Maxwell that mastering them "can massively magnify the positive impact of the code you write", so make sure you add them to your toolkit if not done so already. In this article I explain what they do, why you want to use them and give some practical examples.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Fri, 20 Oct 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2017-10-20:/decorators-by-example.html</guid><category>decorators</category><category>design patterns</category><category>logging</category><category>caching</category><category>memoization</category><category>Flask</category><category>Django</category><category>properties</category><category>classmethod</category><category>staticmethod</category><category>lru_cache</category><category>mock.patch</category><category>contextmanager</category></item><item><title>The Importance of Refactoring Code</title><link>https://pybit.es/refactoring.html</link><description>&lt;p&gt;In this quick post I discuss why refactoring code is one of the most important parts of the learning process.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Thu, 13 Jul 2017 19:02:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2017-07-13:/refactoring.html</guid><category>python</category><category>beginner</category><category>learning</category><category>examples</category><category>code</category><category>refactoring</category></item><item><title>Next Time I Will Use Pandas to Parse Html Tables</title><link>https://pybit.es/pandas-parse-html-table.html</link><description>&lt;p&gt;Last week I did some html table parsing with BeautifulSoup and regex. It turns out there is an easier way to do this: Pandas.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Thu, 08 Jun 2017 12:46:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2017-06-08:/pandas-parse-html-table.html</guid><category>BeautifulSoup</category><category>regex</category><category>Pandas</category><category>parsing</category><category>data</category><category>data cleaning</category><category>energy</category><category>json</category><category>csv</category><category>html</category></item><item><title>OOP Beyond the Basics: Using Properties for Encapsulation, Computation and Refactoring</title><link>https://pybit.es/property-decorator.html</link><description>&lt;p&gt;In this article I share my learning of the property decorator coding a simple Account class. I think it's an unmissable tool in your (Python) OOP toolkit.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Wed, 31 May 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2017-05-31:/property-decorator.html</guid><category>oop</category><category>property</category><category>decorators</category><category>encapsulation</category><category>computation</category><category>dunder</category><category>refactoring</category><category>pytest</category><category>2vs3</category><category>getter</category><category>setter</category></item><item><title>Generators are Awesome, Learning by Example</title><link>https://pybit.es/generators.html</link><description>&lt;p&gt;Learn what a Generator is and check out some different examples.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Fri, 17 Mar 2017 09:00:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2017-03-17:/generators.html</guid><category>python</category><category>tips</category><category>code</category><category>pybites</category><category>generators</category><category>iteration</category><category>yield</category></item><item><title>Don't let mutability of compound objects fool you!</title><link>https://pybit.es/mutability.html</link><description>&lt;p&gt;In this article I explain the difference between shallow versus deep copy with a working example. It's an important concept when working with compound objects.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Tue, 07 Mar 2017 11:00:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2017-03-07:/mutability.html</guid><category>list</category><category>mutable</category><category>copy</category><category>deepcopy</category></item><item><title>Python's data model by example</title><link>https://pybit.es/python-data-model.html</link><description>&lt;p&gt;After &lt;a href="http://pybit.es/oop-primer.html"&gt;last post on OOP&lt;/a&gt; a logical follow-up is Python's data model. We use the great &lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python book&lt;/a&gt; to code up an example of our own, showing the powerful way you can leverage this data model. You can download the notebook &lt;a href="https://github.com/pybites/pybites.github.io-src/blob/master/content/data_model.ipynb"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Wed, 25 Jan 2017 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2017-01-25:/python-data-model.html</guid><category>datamodel</category><category>oop</category><category>magicmethods</category><category>builtin</category><category>pythonic</category><category>iterators</category><category>slicing</category></item><item><title>Everything is an Object, Python OOP primer</title><link>https://pybit.es/oop-primer.html</link><description>&lt;p&gt;I created &lt;a href="https://github.com/pybites/pybites.github.io-src/blob/master/content/oop_fun.ipynb"&gt;a notebook&lt;/a&gt; on OOP (object oriented programming) in Python.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Tue, 24 Jan 2017 23:59:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2017-01-24:/oop-primer.html</guid><category>tutorial</category><category>oop</category><category>objectoriented</category><category>programming</category><category>inheritance</category><category>polymorphism</category><category>ABC</category><category>encapsulation</category><category>property</category></item><item><title>Python Iteration</title><link>https://pybit.es/python_iteration.html</link><description>&lt;p&gt;Iteration in Python is incredibly simple compared to C and other languages. It's easy... maybe a little TOO easy...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Thu, 19 Jan 2017 19:00:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2017-01-19:/python_iteration.html</guid><category>python</category><category>tips</category><category>tricks</category><category>iteration</category><category>resources</category></item></channel></rss>